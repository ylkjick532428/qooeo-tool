# -*- coding: utf-8 -*-
from abc import ABCMeta, abstractmethod

class Singleton(object):
    def __new__(cls, *args, **kw):
        if not hasattr(cls, '_instance'):
            orig = super(Singleton, cls)
            cls._instance = orig.__new__(cls, *args, **kw)
        return cls._instance

#===============================================================================
# DataProviderInterface : 模型数据接口
#===============================================================================
class DataProviderInterface(object):
    __metaclass__ = ABCMeta

    #===========================================================================
    # get_data_fileds_name:获得数据列名称
    #===========================================================================
    @abstractmethod
    def get_data_fields_name(self):
        pass

    #===========================================================================
    # get_data:获得数据
    #===========================================================================
    @abstractmethod
    def get_data(self, police_config):
        pass

#===============================================================================
# TrainInterface : 训练数据接口
#===============================================================================
class TrainInterface(object):
    __metaclass__ = ABCMeta

    #===========================================================================
    # input_data : 输入数据
    #===========================================================================
    @abstractmethod
    def input_data(self, input_rows, fileds):
        pass
    
    #===========================================================================
    # train : 输入数据
    #===========================================================================
    @abstractmethod
    def train(self):
        pass
    
    
    #===========================================================================
    # output_data : 输出数据
    #===========================================================================
    @abstractmethod
    def output_data(self):
        pass
    
#===============================================================================
# TrainInterface : 预测数据接口
#===============================================================================
class PredictInterface(object):
    __metaclass__ = ABCMeta

    #===========================================================================
    # input_data : 输入数据
    #===========================================================================
    @abstractmethod
    def input_data(self, input_rows, fileds):
        pass
    
    #===========================================================================
    # train : 预测
    #===========================================================================
    @abstractmethod
    def predict(self, model):
        pass
    
    
    #===========================================================================
    # output_data : 输出数据
    #===========================================================================
    @abstractmethod
    def output_data(self):
        pass
    
    
#===============================================================================
# EvaluatorInterface : 评价类接口
#===============================================================================
class EvaluatorInterface(object):
    __metaclass__ = ABCMeta

    #===========================================================================
    # evaluate : 评价接口
    #===========================================================================
    @abstractmethod
    def evaluate(self, pred_rows, crime_rows, top, grids_info=""):
        pass

    @abstractmethod
    def get_selected_grids(self, date_pred, top, grids_info=""):
        pass

#===============================================================================
# ImportInterface : 挑选小格子的策略,为了支持派出所定制
#===============================================================================
class ImportInterface(object):
    __metaclass__ = ABCMeta

    #===========================================================================
    # evaluate : 评价接口
    #===========================================================================
    @abstractmethod
    def get_config(self):
        pass

if __name__ == "__main__":
    pass

